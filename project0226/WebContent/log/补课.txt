1、实现一条流程从登陆开始 -》 人员管理（增删改查）
	（但是我没有做侧边栏，注销也没有）
2、需要使用的知识点：
	Oracle、搜索、工厂、mvc、前端页面知识、ajax、form
	js尽量不要用了，改成用jq
	
	
今天课程：
	数据库以及工厂模式：
	数据库安装和数据库的原理，以及数据库的基本使用（略）
	
	0、创建用户以及对应的权限
		连接Oracle的方式：DOS、第三方软件（sqldeveloper）、网页
		1、先用系统管理员进行登录（sys as sysdba，输入密码）
		2、创建表空间、创建用户、授权
			创建表空间 JF1908 对应的文件是 文件路径 大小 50M;
			CREATE TABLESPACE JF1908 DATAFILE 'D:\AddSoft\oracle11\oradata\orcl\JF1908.DBF' SIZE 50M;
			创建用户 JF190802 对应的密码是 JF190802 存放在 JF1908这个表空间中
			CREATE USER JF190802 IDENTIFIED BY JF190802 DEFAULT TABLESPACE JF1908;
			赋予 连接，数据管理，资源访问的权限 给 JF190802这个用户；
			GRANT CONNECT,DBA,RESOURCE TO JF190802;
			
			任务：通过dos命令创建表空间，用户以及对应用户的权限，截图在群里：
			
		3、退出登录，使用创建好的用户进行登录
			EXIT;
			
	1、创建对应的表以及数据
		创建序列，序列的值从100开始
		CREATE SEQUENCE SEQ_ZY_ADMIN START WITH 100;
		
		CREATE TABLE ZY_ADMIN (
			ZAID NUMBER(7) PRIMARY KEY, 
			USERNAME VARCHAR2(100), 
			PASSWORD VARCHAR2(100), 
			ADMIN_CTIME DATE,
			ADMIN_STATE NUMBER(1),
			ADMIN_SEX NUMBER(1),
			ADMIN_TEL VARCHAR2(100));
			
		INSERT INTO ZY_ADMIN VALUES(1, '林方祥', '250', SYSDATE, 1, 0, '119');
		INSERT INTO ZY_ADMIN VALUES(2, '陆天琦', '999', SYSDATE, 1, 1, '110');
		COMMIT;
		任务：创建出用户表、序列、数据
	
	2、开始创建web项目，导入jar文件，创建bean：
		1、创建web项目工程
		2、导入jar文件（oracle、json）
			其中oracle的jar文件在：oracle安装目录\product\11.2.0\dbhome_1\jdbc\lib
			选择ojdbc6.jar文件
		3、创建对应的包
			bean - 创建对应的类
			dao - 数据访问对象
			service - 业务层
			servlet - url访问控制层
			test - 测试
			util - 工具层
		4、创建bean 和数据库相同的bean类
			// 注意：创建属性需要和字段相同，数据库字段如果有下划线那么属性的后面的单词首字母大写，例如：admin_ctime -> adminCtime
			// 注意：如果数据库是日期格式date类型，那么属性的类型必须是Date，导入util包
		
		任务：创建项目工程，导包，并且创建bean文件
		
	3、做一个查询:
		1、创建属性文件
			点击src文件夹右键 new -》 other... -> 找到general文件夹下的file点击 -》 点击next -》
			输入文件名 -》config.properties -> 确定即可
			在内部编写：
			driver=oracle.jdbc.OracleDriver  -》 用来查看你的数据库驱动是否安装成功
			url=jdbc:oracle:thin:@localhost:1521:orcl -》 用来连接你的数据库，
					其中：jdbc:oracle:thin就相当于http，数据的传输协议
					1其中：localhost意思就是访问你自己这台电脑（ip其实是用来找网络中的计算机，
						如果是自己找自己这台电脑可以用localhost或127.0.0.1）
					2其中：1521是找对应计算机中的软件（这里找的就是oracle软件）
					3其中：orcl代表找这款软件下的对应库（当你安装oracle的时候默认的库的名字叫做orcl）中的数据
			username=JF190802 -》就代表用户名
			password=JF190802 -》就代表密码
			
			其实这些就是我们获取Connection的参数
			
		
		2、创建接口类和实现类
			注意：接口类必须是bean的对应名称+Dao
			注意：接口实现类命名：bean的对应名称+DaoImpl
			
			我这边是作为测试，写一个查询所有数据的方法
			
		
		3、创建Connection获取工具类
			public class ConnUtil {
				// 1.获取属性文件对象，用来读取config.properties的属性文件
				private static Properties prop = new Properties();
				// 2.通过静态代码块和属性文件对象，加载配置文件的信息
				// 静态代码块:当我们执行代码的时候，静态代码块会自动执行一次
				static {
					// 2.1.通过反射的机制，获取config.properties的属性文件的流
					InputStream inStream = ConnUtil.class.getClassLoader().getResourceAsStream("config.properties");
					// 2.2.开始加载数据
					try {
						prop.load(inStream);
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				// 3.编写静态工具类，返回Connection
				public static Connection getConn() {
						try {
							// 3.1.判断你的驱动（jar文件）是否加载成功，如果没有加载就报错
							Class.forName(prop.getProperty("driver"));
							// 3.2.获取Connection对象,如果oracle有问题那么就报错
							Connection conn = DriverManager.getConnection(prop.getProperty("url"), prop.getProperty("username"), 
									prop.getProperty("password"));
							// 3.3.返回connection
							return conn;
						} catch (ClassNotFoundException e) { // 驱动没有配置好的错误
							e.printStackTrace();
						} catch (SQLException e) { // oracle没设置好的错误
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						return null;
					}
				}
			}
		4、创建查询所有的函数，实现效果
			@Override
			public List<ZyAdmin> queryAll() {
				// 1.编写sql
				String sql = "SELECT * FROM ZY_ADMIN";
				// 2.获取Connection
				Connection conn = ConnUtil.getConn();
				try {
					// 3.获取预编译对象（用来设置参数以及判断你的sql语句是否有误）
					PreparedStatement ps = conn.prepareStatement(sql);
					// 4.开始执行搜索(返回结果集信息，所有的查询数据都在ResultSet对象中)
					ResultSet set = ps.executeQuery();
					// 5.从ResultSet中得到数据保存到ZyAdmin集合中
					// 5.1.先创建一个集合
					List<ZyAdmin> admins = new ArrayList<ZyAdmin>();
					// 5.2.遍历找到每一行的数据，并保存到5.1创建好的集合中
					while(set.next()) {
						int zaid = set.getInt("ZAID");
						String username = set.getString("USERNAME");
						String password = set.getString("PASSWORD");
						Date adminCtime = set.getDate("ADMIN_CTIME");
						int adminState = set.getInt("ADMIN_STATE");
						int adminSex = set.getInt("ADMIN_SEX");
						String adminTel = set.getString("ADMIN_TEL");
						
						ZyAdmin admin = new ZyAdmin(zaid, username, password, adminCtime, adminState, adminSex, adminTel);
						admins.add(admin);
					}
					// 最后将集合返回
					return admins;
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					try {
						conn.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}
				return null;
			}
		
		5、测试
			public static void main(String[] args) {
				ZyAdminDaoImpl impl = new ZyAdminDaoImpl();
				System.out.println(impl.queryAll());
			}
		
		6、工厂
			public class DaoFactory {
				// 1.首先工厂自己需要单例
				private static DaoFactory f;
				private DaoFactory() {}
				public static DaoFactory newInstance() {
					if(f == null) {
						f = new DaoFactory();
					}
					return f;
				}
				// 这里的工厂主要是创建dao，所以我写一个map用来保存我创建出来的dao
				// 1.创建一个map，静态，key是String类型，value是object类型
				private static Map<String, Object> map = new HashMap<String, Object>();
				// 2.写一个静态代码块，将初始化的dao对象全部丢到map中
				static {
					ZyAdminDaoImpl impl1 = new ZyAdminDaoImpl();
					map.put("ZyAdminDao", impl1);
				}
				// 3.创建一个方法传入对应的key，返回对应dao对象
				public Object getDao(String key) {
					return map.get(key);
				}
				// 相当于工厂只有一个，当调用getDao时，只要给了正确的key就可以得到对应的dao对象
				
			}
		
		7、再次测试：
			ZyAdminDaoImpl impl = (ZyAdminDaoImpl) DaoFactory.newInstance().getDao("ZyAdminDao");
			System.out.println(impl.queryAll());
			
	小结：今天的东西，除了数据库和工厂模式以外都是二阶段的知识点
		所以务必掌握，工厂模式主要是为了减小计算机的内存开销，替换数据的实例化，提高访问效率而存在的
		
	任务：查询今天所创建的表的数据，通过工厂得到dao调用查询的方法，打印结果
	在日报中截图（25）：
		工厂、dao、测试类 这三个类截图
	
	